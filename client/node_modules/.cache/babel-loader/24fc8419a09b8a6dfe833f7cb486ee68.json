{"ast":null,"code":"var _jsxFileName = \"/Users/fernandoalvarado/react-click-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\";\nimport Item from \"./components/Item/Item\";\nimport pokemon from \"./pokemon.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      score: 0,\n      topScore: 0,\n      maxScore: 12,\n      message: \"Choose A Pokemon!\",\n      messageClass: \"\",\n      pokemon: pokemon,\n      userChoice: []\n    };\n\n    this.countHandler = () => {\n      const newScore = this.state.score + 1;\n      this.setState({\n        score: newScore\n      });\n\n      if (newScore >= this.state.topScore) {\n        this.setState({\n          topScore: newScore\n        });\n      }\n    };\n\n    this.clickHandler = event => {\n      if (this.state.userChoice.indexOf(event) === -1) {\n        this.countHandler();\n        this.setState({\n          userChoice: this.state.userChoice.concat(event)\n        });\n      } else {\n        this.gameOver();\n      }\n    };\n\n    this.gameOver = () => {\n      this.setState({\n        score: 0,\n        message: \"Sorry Trainer, You Lost!\"\n      });\n    };\n\n    this.shuffle = array => {\n      array.sort(() => Math.random() - 0.5);\n    };\n\n    this.winReset = correctCharacters => {\n      if (this.state.score + 1 === this.state.maxScore) {\n        this.setState({\n          score: 0,\n          topScore: 0\n        });\n        const updatedCharacters = correctCharacters.map(ch => true ? { ...ch,\n          isClicked: false\n        } : ch);\n        return updatedCharacters;\n      } else {\n        return correctCharacters;\n      }\n    };\n\n    this.randomizeCharacters = name => {\n      var resetNeeded = false;\n      const pokemon = this.state.pokemon.map(ch => {\n        if (ch.name === name) {\n          if (ch.isClicked === false) {\n            this.correctChoice();\n            return { ...ch,\n              isClicked: true\n            };\n          } else {\n            resetNeeded = true;\n            return { ...ch,\n              isClicked: false\n            };\n          }\n        }\n\n        return ch;\n      });\n\n      if (resetNeeded) {\n        this.setState({\n          characters: this.shuffle(this.wrongChoice()),\n          messageClass: \"incorrect\"\n        });\n      } else {\n        this.setState({\n          pokemon: this.shuffle(this.winReset(pokemon))\n        });\n      }\n    };\n\n    this.renderCharacter = () => {\n      return this.state.pokemon.map(pokemon => /*#__PURE__*/React.createElement(Item, {\n        image: pokemon.image,\n        name: pokemon.name,\n        key: pokemon.id,\n        onClick: this.clickHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      score: this.state.score,\n      topscore: this.state.topScore,\n      message: this.state.message,\n      messageClass: this.state.messageClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, this.renderCharacter()));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/fernandoalvarado/react-click-game/src/App.js"],"names":["React","Component","Header","Navbar","Item","pokemon","App","state","score","topScore","maxScore","message","messageClass","userChoice","countHandler","newScore","setState","clickHandler","event","indexOf","concat","gameOver","shuffle","array","sort","Math","random","winReset","correctCharacters","updatedCharacters","map","ch","isClicked","randomizeCharacters","name","resetNeeded","correctChoice","characters","wrongChoice","renderCharacter","image","id","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\";\nimport Item from \"./components/Item/Item\";\nimport pokemon from \"./pokemon.json\";\n\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    topScore: 0,\n    maxScore: 12,\n    message: \"Choose A Pokemon!\",\n    messageClass:\"\",\n    pokemon: pokemon,\n    userChoice: []\n  };\n\n  countHandler = () => {\n     const newScore = this.state.score + 1 \n      this.setState({score: newScore})\n\n      if(newScore >= this.state.topScore) {\n        this.setState({topScore: newScore})\n      }\n    \n  }\n\n  clickHandler = (event) => {\n\n    if(this.state.userChoice.indexOf(event) === -1)  {\n      this.countHandler()\n\n      this.setState({userChoice: this.state.userChoice.concat(event)})\n\n    }\n    else {\n      this.gameOver()\n    }\n  }\n\n  gameOver = () => {\n    this.setState({score: 0, message: \"Sorry Trainer, You Lost!\"})\n  }\n\n   shuffle = (array) => {\n    array.sort(() => Math.random() - 0.5);\n  }\n\n  componentDidMount\n  \n  \n  // shuffle = (array) => {\n    \n  //   let currentIndex = array.length;\n  //   let temporaryValue;\n  //   let randomIndex;\n  \n  //   while (0 !== currentIndex) {\n  \n  //     randomIndex = Math.floor(Math.random() * currentIndex);\n  //     currentIndex -= 1;\n  \n  //     temporaryValue = array[currentIndex];\n  //     array[currentIndex] = array[randomIndex];\n  //     array[randomIndex] = temporaryValue;\n  //   }\n  //   return array;\n  \n  // }\n\n  \n  winReset = (correctCharacters) => {\n  \n    if (this.state.score + 1 === this.state.maxScore) {\n      this.setState({score: 0, topScore: 0})\n      const updatedCharacters = correctCharacters.map(ch => (true) ? { ...ch, isClicked: false} : ch)\n        return updatedCharacters\n    } else {\n      return correctCharacters\n    }\n  \n  } \n  \n  \n  randomizeCharacters = (name) => {\n  \n    var resetNeeded = false;\n    const pokemon = this.state.pokemon.map(ch => {\n  \n      if(ch.name === name) {\n        if (ch.isClicked === false) {\n          this.correctChoice()\n          return { ...ch, isClicked: true}\n        } else {\n          resetNeeded = true\n          return { ...ch, isClicked: false}\n        }\n      }\n      return ch\n    })\n    if (resetNeeded) {\n      this.setState({\n        characters: this.shuffle(this.wrongChoice()),\n        messageClass:\"incorrect\"\n      })\n      \n    } else {\n      this.setState({ pokemon: this.shuffle(this.winReset(pokemon)) })\n\n    }\n    \n  } \n  \n  renderCharacter = () => {\n  \n    return ( this.state.pokemon.map((pokemon) => \n            <Item \n              image={pokemon.image} \n              name={pokemon.name} \n              key={pokemon.id} \n              onClick={this.clickHandler} \n            />\n  \n          ))\n  };\n  \n  render () {\n  \n    return (\n      <div className=\"App\">\n        <Navbar\n          score={this.state.score}\n          topscore={this.state.topScore}\n          message={this.state.message}\n          messageClass={this.state.messageClass}\n        />\n  \n        <Header />\n        <div className=\"content\">\n          {this.renderCharacter()}\n        </div>\n      </div>\n  \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}